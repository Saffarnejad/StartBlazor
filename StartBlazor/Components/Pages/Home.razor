@page "/"
@using System.Globalization

@inject ICategoryRepository _categoryRepository
@inject IProductRepository _productRepository

<PageTitle>Home</PageTitle>
@if (IsProcessing)
{
        <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
            <img src="/images/loading.gif" alt="loading" />
        </div>
}
else
{
        <div class="container-fluid px-0 m-0 full-width">
            <div class="jumbotron-custom">
                <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">

                    <div class="d-flex align-items-center" style="width: 100%;">
                        <input type="text" class="form-control rounded-pill"
                        @bind:event="oninput" @bind:get="_searchText" @bind:set="FilterProductsByName"
                        placeholder="Search for Food Items!"
                        style="width: 100%; padding: 20px;">
                        <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
                    </div>
                </div>
            </div>

            <div class="content px-4 m-2">
                <ul class="nav nav-underline justify-content-center mb-2">
                    <li class="nav-item">
                        <span class="nav-link @GetActiveTabClass(0)" href="#" style="cursor: pointer" @onclick="()=>FilterProductsByCategory(0)">All</span>
                    </li>
                    @foreach (var category in Categories)
                    {
                        <li class="nav-item">
                                    <span class="nav-link @GetActiveTabClass(category.Id)" href="#" style="cursor: pointer" @onclick="()=>FilterProductsByCategory(category.Id)">@category.Name</span>
                        </li>
                    }
                </ul>
                <div class="row mt-4 mx-1">
                    @foreach (var product in FilteredProducts)
                    {
                        <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
                            <div class="card">
                                <div class="mt-3 mb-2 row">
                                    <div class="col-6 px-3">
                                        @if(!string.IsNullOrWhiteSpace(product.SpecialTag))
                                        {
                                            <i class="bi bi-star btn btn-outline-success disabled"> @product.SpecialTag</i>
                                        }
                                    </div>
                                    <div class="col-6 text-end text-danger px-3 h3">
                                        @product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                    </div>
                                </div>
                                <div class="text-center">
                                    @if(!string.IsNullOrWhiteSpace(product.ImageUrl))
                                    {
                                        <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@product.ImageUrl" style="">
                                    }
                                    else
                                    {
                                        <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="images/default.png" style="">
                                    }
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title text-center lead text-success">@product.Name</h5>
                                    <p class="card-text mt-2">@((MarkupString)product.Description)</p>
                                    <h4 class="text-center">
                                        <i class="bi bi-cart3 btn btn-success text-right px-5 form-control"> Add to cart</i>
                                    </h4>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<Data.Category> Categories { get; set; } = new List<Data.Category>();
    private IEnumerable<Data.Product> Products { get; set; } = new List<Data.Product>();
    private IEnumerable<Data.Product> FilteredProducts { get; set; } = new List<Data.Product>();
    private int _selectedCategoryId = 0;
    private string _searchText = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategoriesAndProducts();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategoriesAndProducts()
    {
        Categories = await _categoryRepository.GetAllAsync();
        Products = await _productRepository.GetAllAsync();
        FilterProductsByCategory(0);
    }

    private void FilterProductsByCategory(int categoryId)
    {
        _selectedCategoryId = categoryId;
        if (categoryId == 0)
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products
            .Where(product => product.CategoryId == categoryId)
            .ToList();
        }
        _searchText = string.Empty;
    }

    private void FilterProductsByName(string searchText)
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products
            .Where(product => product.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
            .ToList();
        }
        _searchText = searchText;
    }

    private string GetActiveTabClass(int categoryId)
    {
        return _selectedCategoryId == categoryId ? "active" : string.Empty;
    }
}