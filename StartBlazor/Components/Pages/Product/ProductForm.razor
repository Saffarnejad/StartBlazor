@page "/product/create"
@page "/product/update/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject IProductRepository _productRepository
@inject NavigationManager _navigationManager
@inject IWebHostEnvironment _webHostEnvironment
@inject IJSRuntime _js

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ms-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id == 0 ? "Create" : "Update") Product</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Product" FormName="ProductForm" OnValidSubmit="SaveProduct">
                <DataAnnotationsValidator />
                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.Name" class="form-control" id="Name" placeholder="Name" />
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(() => Product.Name)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="Product.Price" class="form-control" id="Price" placeholder="Price" />
                        <label for="Price">Price</label>
                        <ValidationMessage For="@(() => Product.Price)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.Description" class="form-control" id="Description" placeholder="Description" />
                        <label for="Description">Description</label>
                        <ValidationMessage For="@(() => Product.Description)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.SpecialTag" class="form-control" id="SpecialTag" placeholder="Special Tag" />
                        <label for="SpecialTag">Special Tag</label>
                        <ValidationMessage For="@(() => Product.SpecialTag)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select" id="Category">
                            <option value="0" disabled selected>--Select Category--</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <label for="Category">Category</label>
                        <ValidationMessage For="@(() => Product.CategoryId)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        @if (Product.ImageUrl == null)
                        {
                            <InputFile OnChange="LoadFiles" class="form-control pb-3" id="ImageFile" accept="image/x-png,image/jpeg">
                            </InputFile>
                            <label for="ImageFile">Upload Image</label>
                        }
                        @if (Product.ImageUrl != null)
                        {
                            <div class="row">
                                <div class="col-3">
                                    <img src="@Product.ImageUrl" alt="@Product.Name image" class="img-thumbnail" />
                                </div>
                                <div class="col-md-9">
                                    <i class="bi bi-trash btn btn-outline-danger" @onclick="DeleteImage">Remove</i>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-floppy2-fill"></i> Save
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="product" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Product Product { get; set; } = new Product();

    private IEnumerable<Category> Categories { get; set; } = new List<Category>();

    private string? DirectoryPath { get; set; }
    private bool IsImageLoading { get; set; } = false;
    private bool IsProcessing { get; set; } = true;

    protected override Task OnInitializedAsync()
    {
        DirectoryPath = Path.Combine(_webHostEnvironment.WebRootPath, "images", "product");
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAndCategories();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductAndCategories()
    {
        if (Id > 0)
        {
            Product = await _productRepository.GetAsync(Id);
        }
        Categories = await _categoryRepository.GetAllAsync();
    }

    private async Task SaveProduct()
    {
        IsProcessing = true;
        if (Product.Id == 0)
        {
            await _productRepository.CreateAsync(Product);
            await _js.Toastr(ToastrType.Success, "Product Created Successfully");
        }
        else
        {
            await _productRepository.UpdateAsync(Product);
            await _js.Toastr(ToastrType.Success, "Product Updated Successfully");
        }
        IsProcessing = false;
        _navigationManager.NavigateTo("product");
    }

    private async Task LoadFiles(InputFileChangeEventArgs inputFile)
    {
        IsImageLoading = true;
        var file = inputFile.File;
        var fileInfo = new FileInfo(file.Name);
        var newFileName = $"{Guid.NewGuid()}.{fileInfo.Extension}";
        if (!Directory.Exists(DirectoryPath))
        {
            Directory.CreateDirectory(DirectoryPath);
        }
        var path = Path.Combine(DirectoryPath, newFileName);
        await using var fileStream = new FileStream(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);
        Product.ImageUrl = $"/images/product/{newFileName}";
        IsImageLoading = false;
    }

    private void DeleteImage()
    {
        if (Product.ImageUrl == null)
        {
            return;
        }
        var fileToDelete = Product.ImageUrl.Split('/').Reverse().First();
        var filePathToDeleteImage = Path.Combine(DirectoryPath, fileToDelete);
        if (!File.Exists(filePathToDeleteImage))
        {
            return;
        }
        File.Delete(filePathToDeleteImage);
        Product.ImageUrl = null;
        return;
    }
}
